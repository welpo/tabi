# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[remote.github]
owner = "welpo"
repo = "tabi"

[changelog]
# changelog header
header = """
# Changelog

Welcome to the changelog for tabi. This document aims to provide a comprehensive list of all notable changes made to the project, organised chronologically by release version.

We use Semantic Versioning (SemVer) for our version numbers, formatted as MAJOR.MINOR.PATCH. Major version changes involve significant (breaking) changes, minor versions introduce features and improvements in a backward compatible manner, and patch versions are for bug fixes and minor tweaks.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}
{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## {{ version | trim_start_matches(pat="v") }} - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## unreleased
{% endif %}\

{% macro commit(commit, in_breaking_section=false) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}{% if commit.breaking and not in_breaking_section %}[**‚ÄºÔ∏èBREAKING‚ÄºÔ∏è**] {% endif %}\
        {{ commit.message | upper_first }}\
        {% if not commit.remote.pr_number %} ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }})){%- endif -%}{% if commit.remote.username %} by @{{ commit.remote.username }} \
        {%- set co_authors = commit.footers | filter(attribute="token", value="Co-authored-by") | map(attribute="value") -%}
        {%- set number_of_co_authors = co_authors | length -%}
        {%- for co_author in co_authors -%}
            {%- if not loop.last %}, {% else %} and {% endif %}@{{ co_author | split(pat=" <") | first | trim }}
        {%- endfor -%}
        {%- endif -%}
{% endmacro -%}

{%- set breaking_header_shown = false -%}
{% for commit in commits -%}
    {% if commit.breaking and not breaking_header_shown -%}
        {% raw %}\n### üí• BREAKING CHANGES üí•\n{% endraw %}
        {%- set_global breaking_header_shown = true -%}
    {%- endif -%}
    {%- if commit.breaking %}
        {{ self::commit(commit=commit, in_breaking_section=true) -}}
    {% endif -%}
{%- endfor -%}
{%- if breaking_header_shown == true -%}
    {% raw %}\n{% endraw %}\
{%- endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 -%}
  {% raw %}\n{% endraw %}### üë• New contributors
  {% raw -%}\n{% endraw -%}
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  ü´∂ @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{% endfor %}
{%- endif %}
{% raw -%}\n{% endraw -%}
"""

# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
    # { pattern = " @([a-zA-Z0-9](?:[a-zA-Z0-9]+-?)*[a-zA-Z0-9])", replace = " [@$1](https://github.com/$1)"}, # add link to GitHub usernames (done in release script instead)
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace the issue number with the link.
    { pattern = "\\(#([0-9]+)\\)", replace = "([#${1}](https://github.com/welpo/tabi/issues/${1}))" },
    # Remove trailing whitespace.
    { pattern = ' +$', replace = "" },
    # Replace multiple spaces with a single space.
    { pattern = ' +', replace = " " },
    # Remove gitmoji, both actual UTF emoji and :emoji:
    { pattern = ' *(:\w+:|[\p{Emoji_Presentation}\p{Extended_Pictographic}](?:\u{FE0F})?\u{200D}?) *', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->‚ú® Features" },
    { message = "^fix", group = "<!-- 1 -->üêõ Bug fixes" },
    { message = "^style", group = "<!-- 2 -->üíÑ Styling" },
    { message = "^doc", group = "<!-- 3 -->üìù Documentation" },
    { message = "^refactor", group = "<!-- 4 -->‚ôªÔ∏è Refactor" },
    { message = "^test", group = "<!-- 5 -->‚úÖ Testing" },
    { message = "^misc", group = "<!-- 6 -->üîß Miscellaneous tasks" },
    { message = "^deprecate", group = "<!-- 7 -->üóëÔ∏èÔ∏è Deprecations" },
    { message = "^chore", skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "v[0-9].*"

# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
# limit the number of commits included in the changelog.
# limit_commits = 42
